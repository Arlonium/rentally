// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// AuthJS
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticators Authenticator[]
  societies     Society[]
  houses        House[] // Directly managed houses

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Custom Models

model Society {
  id         String   @id @default(cuid())
  name       String
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  houses     House[]
  files      File[]   // Add the inverse relation field
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model House {
  id          String    @id @default(cuid())
  address     String
  ownerId     String
  societyId   String?
  owner       User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  society     Society?  @relation(fields: [societyId], references: [id], onDelete: SetNull)
  tenants     Tenant[]
  files       File[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tenant {
  id          String    @id @default(cuid())
  name        String
  email       String?
  phoneNumber String?
  houseId     String?
  house       House?    @relation(fields: [houseId], references: [id], onDelete: SetNull)
  archived    Boolean   @default(false)
  files       File[]    // Add the inverse relation field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model File {
  id         String   @id @default(cuid())
  name       String
  url        String
  houseId    String?
  societyId  String?
  tenantId   String?
  house      House?   @relation(fields: [houseId], references: [id], onDelete: SetNull)
  society    Society? @relation(fields: [societyId], references: [id], onDelete: SetNull)
  tenant     Tenant?  @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
